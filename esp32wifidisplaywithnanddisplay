#Note- actually hum dekhte hai ki ye work kaise karta hai. jab hum wifi change karenge to hume ek ip milega jisse hum hit marenge aur wo hume ip address dega serially. lekin hume kaise pta chalega ki humara ip address kya hai kyuki client to connect krke controller ko serially dekhega nahi
to iska ek solution hai mdns jisse ki mujhe ab ip address ki jarurat nahi padhegi balki mai esp32.local se ping kara sakta hu. so ye problem to resolve ho gya ab ek aur dusra problem ye hai ki mai different wifi me switch kaise krunga to maine post request banaya hai isme ki http://esp32.local/wifi aur http://esp32.local/setWifi aur http://esp32.local/setData   
mai simply kya karunga ki wifi ke ssid aur password ko EEPROM memory me save karaunga. ye eeprom se fetch karega aur wifi ko conect karega. aur agar ye kisi bhi karan se us wifi se connect nahi ho payega to ye AP Mode me chala jayega. AP mode means ye mere pass ek hotspot ki tarah open ho jayega aur mai apne aap ko us hotspot se connect karunga.aur connect hone ke bad mai
apne system me ya apne mobile me 192.168.4.1 ip open karunga to ek webpage open hoga jisme mai ssid aur password enter karunga to mera esp32 ab us wifi network se connect hone lagega. mai same chiz postman se bhi kar sakta hu 

step-1) sending data to display -> http://esp32.local/setData, post method,  { "value": "156" }
step-2) connecting with different wifi network sta Mode ->  http://esp32.local/setWifi, post method,  { "ssid": "Airtel_moha_9230", "password": "Houston#198" }
step-3) connecting with different wifi network AP Mode ->  http://192.168.4.1/wifi, post method,  { "ssid": "Airtel_moha_9230", "password": "Houston#198" }

/*
void setup() {
  Serial2.begin(9600, SERIAL_8N1, 16, 17);
  Serial.begin(9600);
  Serial.println("RS485 communication started");
}

void loop() {
  // Clear the display
  String dataToSendClear = "|C|2|6|";
  Serial2.print(dataToSendClear);
  Serial.println("Sent: " + dataToSendClear);
  delay(1000);

  String dataToSend1 = "|C|2|4|1|36-0-#B72|";
  Serial2.print(dataToSend1);
  Serial.println("Sent: " + dataToSend1);
  delay(5000);
}

*/

#include <WiFi.h>
#include <WebServer.h>
#include <EEPROM.h>
#include <DNSServer.h>
#include <ESPmDNS.h>
#include <ArduinoJson.h>

const char* default_ssid = "ESP32_Config";
const char* default_password = "12345678";

WebServer server(80);
DNSServer dnsServer;

// Wi-Fi credentials
String ssid = "";
String password = "";

// Function to start AP mode
void startAPMode() {
  WiFi.softAP(default_ssid, default_password);
  IPAddress IP = WiFi.softAPIP();
  Serial.println("AP Mode started");
  Serial.print("AP IP Address: ");
  Serial.println(IP);

  dnsServer.start(53, "*", IP);

  // Root page for Wi-Fi configuration
  server.on("/", []() {
    String page = "<h1>Wi-Fi Configuration</h1>";
    page += "<form method='POST' action='/wifi'>";
    page += "SSID: <input type='text' name='ssid'><br>";
    page += "Password: <input type='password' name='password'><br>";
    page += "<button type='submit'>Save</button>";
    page += "</form>";
    server.send(200, "text/html", page);
  });

  // Save Wi-Fi credentials
  server.on("/wifi", HTTP_POST, handleSaveWiFi);

  // Handle setting Wi-Fi
  server.on("/setWifi", HTTP_POST, handleSetWiFi);

  server.begin();
}

// Handle saving Wi-Fi credentials
void handleSaveWiFi() {
  if (server.hasArg("plain")) {
    String jsonData = server.arg("plain");

    DynamicJsonDocument doc(512);
    DeserializationError error = deserializeJson(doc, jsonData);
    if (error) {
      server.send(400, "text/plain", "Invalid JSON format");
      return;
    }

    if (doc.containsKey("ssid") && doc.containsKey("password")) {
      ssid = doc["ssid"].as<String>();
      password = doc["password"].as<String>();

      EEPROM.writeString(0, ssid);
      EEPROM.writeString(32, password);
      EEPROM.commit();

      server.send(200, "application/json", "{\"message\":\"Wi-Fi credentials saved! Rebooting...\"}");
      delay(2000);
      ESP.restart();
    } else {
      server.send(400, "application/json", "{\"error\":\"Missing 'ssid' or 'password' in JSON\"}");
    }
  } else {
    server.send(400, "application/json", "{\"error\":\"Bad Request - Invalid or missing payload\"}");
  }
}

// Handle setting Wi-Fi from another route
void handleSetWiFi() {
  if (server.hasArg("plain")) {
    String jsonData = server.arg("plain");

    DynamicJsonDocument doc(512);
    DeserializationError error = deserializeJson(doc, jsonData);
    if (error) {
      server.send(400, "text/plain", "Invalid JSON format");
      return;
    }

    if (doc.containsKey("ssid") && doc.containsKey("password")) {
      ssid = doc["ssid"].as<String>();
      password = doc["password"].as<String>();

      EEPROM.writeString(0, ssid);
      EEPROM.writeString(32, password);
      EEPROM.commit();

      server.send(200, "application/json", "{\"message\":\"Wi-Fi credentials saved! Rebooting...\"}");
      delay(2000);
      ESP.restart();
    } else {
      server.send(400, "application/json", "{\"error\":\"Missing 'ssid' or 'password' in JSON\"}");
    }
  } else {
    server.send(400, "application/json", "{\"error\":\"Bad Request - Invalid or missing payload\"}");
  }
}

// Send data to display (for future integration)
void handleSendDataToDisplay() {
  if (server.hasArg("plain")) {
    String jsonData = server.arg("plain");

    DynamicJsonDocument doc(1024);
    DeserializationError error = deserializeJson(doc, jsonData);
    if (error) {
      server.send(400, "text/plain", "Invalid JSON format");
      return;
    }

    if (doc.containsKey("value")) {
      String data = doc["value"].as<String>();
      Serial.println("Data to display: " + data);
      sendDataToDisplay(data);
      server.send(200, "text/plain", "Data sent to display: " + data);
    } else {
      server.send(400, "text/plain", "Bad Request - Missing 'value' field in JSON");
    }
  } else {
    server.send(400, "text/plain", "Bad Request - Missing body or invalid format");
  }
}

void sendDataToDisplay(String data) {
  String dataToSendClear = "|C|2|6|";
  Serial2.print(dataToSendClear);
  Serial.println("Sent to display: " + dataToSendClear);
  delay(1000);

  String dataToSend = "|C|2|4|1|36-0-#B" + data + "|";
  Serial2.print(dataToSend);
  Serial.println("Sent to display: " + dataToSend);
}

void setup() {
  Serial.begin(115200);  
  Serial2.begin(9600, SERIAL_8N1, 16, 17);
  Serial.println("RS485 communication started");
  EEPROM.begin(512);

  String saved_ssid = EEPROM.readString(0);
  String saved_password = EEPROM.readString(32);

  if (saved_ssid.length() > 0 && saved_password.length() > 0) {
    WiFi.begin(saved_ssid.c_str(), saved_password.c_str());

    int attempts = 0;
    while (WiFi.status() != WL_CONNECTED && attempts < 30) {
      delay(1000);
      Serial.println("Connecting to Wi-Fi...");
      attempts++;
    }

    if (WiFi.status() == WL_CONNECTED) {
      Serial.println("Connected to Wi-Fi");
      Serial.print("IP Address: ");
      Serial.println(WiFi.localIP());

      if (MDNS.begin("esp32")) {
        Serial.println("MDNS responder started");
      }

      // Routes in STA mode
      server.on("/setWifi", HTTP_POST, handleSetWiFi);
      server.on("/setData", HTTP_POST, handleSendDataToDisplay);
      server.begin();
      Serial.println("HTTP server started");
    } else {
      Serial.println("Wi-Fi connection failed, starting AP mode...");
      startAPMode();
    }
  } else {
    Serial.println("No saved Wi-Fi credentials found, starting AP mode...");
    startAPMode();
  }
}

void loop() {
  server.handleClient();
  dnsServer.processNextRequest();
}

